python - programing lang
jupyter notebook - app/environment/interface
	- share
	- online
	- edit
anaconda - app/env/interface
	- more tools like gdb, pip, command line
	- glorified vscode 
	- IDE - integrated dev env
spyder too.

programming - scheduling/ instructing
linear programming - math problem
computer programming - language use

python can be used to give instructions to the comp

python - inspired by ABC and Modula-3
fortran - 1950s scientific computation

OO lang - Object Oriented lang
python is actually not a pure oop lang
every Ohas 2 bject things - properties, functionalities
object interact with other objects
Class vs Object

interpreted vs compiled
compiling    = preprocessing + object code + loading + linking + executing
interpreting = only executing (though line by line)
python is an interpreted lang

			Compiled language 			     	Interpreted language
	- all source code is analysed in      - source code is analysed line by line
	its entirity.

	- have to handle ALL errors before    - not necessary
	running.

	- faster                              - slower
	- hard to change                      - easy to change



cross platform - almost all OSes Windows, Linux, Android, MacOS, iOS, FreeBSD

python is fairly complete (you can find library for almost anything). 
python has a huge community.
so many libraries.

python is free and open source 

variety of usage - game, website, scripting, sysadmin, IoT, embedded

disadvantages:
	- slow
	- less libraries than C, Java etc
	- weakly typed
	- not convertible, easily to other language


using IDLE:
	- interactive mode when opened
	- new file(ctrl N), run by F5

using cmd:
	- open terminal in the folder where python program is.
	- type "python <program_name.py>"
	- the program is executed
	- need to add python to PATH for this 

			###  22.09.2023 20:30 IST  ###

- boolean operators
	==  (is equal to)
		a == b (suppose a=4, b=5, returns False)
	!= (not equal to)
		a != b (suppose a=4, b=5, returns True)

	use of `not` keyword in python
		not(a == b) (suppose a=4, b=5, returns True)
		-> a != b

		not (a==b) -> a !=b
		not (a!=b) -> a ==b

- identity operator
	
	`is` keyword in python

	id() is a function that gives a variable a number, based on its value

	a = 23
	b = 23
	a is b -> True
	id (a) -> 140735011808744
	id (b) -> 140735011808744

- bitwise operators
	
	1101101 (109)
  & 1010110 (86)
    1000100 (68)

    => 109 & 86 = 68

   similarly | (bitwise or)  and  ^ (bitwise xor)

	1101101 (109)
  ^ 1010110 (86)
    0111011 (59)

    => 109 ^ 86 = 59


- if statements

	if accepts a boolean in front of it.

	case 1
	if (TRUE) :
		{if block} -> executes
	else :
		{else block} -> doesn't execute

	case 2
	if (FALSE) :
		{if block} -> doesn't execute
	else :
		{else block} -> executes

	# bool <boolean operation> bool -> bool


				### 24th Sep 2023 ###

loops

range()

				### 26th Sep 2023 ###

range(start=0, stop, st) -> constructor that can take max 3 integers

list    -> data structure
list()  -> constructor that takes an iterable

range(start, stop, step) -> step  is 1 by default
												 -> start is 0 by default
range(1,10,3) -> 1 4 7

range is an `iterable`

iterative -> iteration -> meaning repetition

list -> stores multiple values ~ in an order ~
				- jemiti deiche semiti paiba
		 -> those values can be accessed using an index
		    - ((most things)) start from 0
		    - listname[index]
		 -> list is a data structure but it also is an iterable

`in` keyword
checks if a value is in an iterable

<value> in <iterable>
